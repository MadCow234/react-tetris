{"version":3,"sources":["img/bg.png","services/gameHelpers.js","services/tetrominos.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledTetris.js","hooks/usePlayer.js","hooks/useStage.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","I","J","L","O","S","Z","T","randomTetromino","randTetromino","Math","floor","random","StyledCell","styled","div","props","type","React","memo","console","log","StyledStage","height","width","Stage","map","row","cell","index","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","bgImg","StyledTetris","usePlayer","useState","collided","setPlayer","rotate","dir","rotatedTetromino","_","col","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","reduce","acc","findIndex","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21bd581b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12; // numCols\r\nexport const STAGE_HEIGHT = 20; // numRows\r\n\r\n/**\r\n * Returns a 2-dimensional array of cells, where each cell contains an instruction-set array of 2 elements as follows:\r\n *  cell[0]: type of tetromino, one of [0, I, J, L, O, S, Z, T]  - instructs which tetromino shape and color this cell is part of\r\n *  cell[1]: instruction for rendering, one of ['clear', 'merge'] - informs whether a cell has collided with another cell \r\n */\r\nexport const createStage = () => Array(STAGE_HEIGHT).fill(Array(STAGE_WIDTH).fill([0, 'clear']))\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY}) => {\r\n  for (let y = 0; y < player.tetromino.length; y++) {\r\n    for (let x = 0; x < player.tetromino[y].length; x++) {\r\n      // Check that we're on an actual tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // Check that our move is inside the game area's height (y)\r\n          // We shouldn't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] || \r\n          // Check that our move is inside the game area's width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // Check that the cell we're moving to is not set to 'clear'\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","/**\r\n * Defines the tetromino game pieces.\r\n */ \r\nexport const TETROMINOS = {\r\n  0: { shape: [[0]], color: '0, 0, 0' }, // A \"clean\" state, used when not showing any tetrominos\r\n  I: {\r\n    shape: [\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0]\r\n    ],\r\n    color: '80, 227, 230'\r\n  },\r\n  J: {\r\n    shape: [\r\n      [ 0 , 'J', 0],\r\n      [ 0 , 'J', 0],\r\n      ['J', 'J', 0]\r\n    ],\r\n    color: '36, 95, 223'\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, 'L',  0 ],\r\n      [0, 'L',  0 ],\r\n      [0, 'L', 'L']\r\n    ],\r\n    color: '223, 173, 36'\r\n  },\r\n  O: {\r\n    shape: [\r\n      ['O', 'O'],\r\n      ['O', 'O']\r\n    ],\r\n    color: '223, 217, 36'\r\n  },\r\n  S: {\r\n    shape: [\r\n      [ 0 , 'S', 'S'],\r\n      ['S', 'S',  0 ],\r\n      [ 0 ,  0 ,  0 ]\r\n    ],\r\n    color: '48, 211, 56'\r\n  },\r\n  Z: {\r\n    shape: [\r\n      ['Z', 'Z',  0 ],\r\n      [ 0 , 'Z', 'Z'],\r\n      [ 0 ,  0 ,  0 ]\r\n    ],\r\n    color: '227, 78, 78'\r\n  },\r\n  T: {\r\n    shape: [\r\n      [ 0 ,  0 ,  0 ],\r\n      ['T', 'T', 'T'],\r\n      [ 0 , 'T',  0 ]\r\n    ],\r\n    color: '132, 61, 198'\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a random tetromino shape.\r\n */\r\nexport const randomTetromino = () => {\r\n  const tetrominos = 'IJLOSZT';\r\n  const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n}","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`","import React from 'react';\r\nimport { TETROMINOS } from '../services/tetrominos';\r\n\r\n// Styled Components\r\nimport { StyledCell } from './styles/StyledCell';\r\n\r\nconst Cell = ({type}) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color} >{console.log(\"re-render\")}</StyledCell>\r\n)\r\n\r\n// Export the cell with React.memo() so the cell only re-renders when it changes\r\nexport default React.memo(Cell);","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`","import React from 'react';\r\n\r\n// Components\r\nimport Cell from './Cell';\r\n\r\n// Styled Components\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nconst Stage = ({stage}) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, index) => <Cell key={index} type={cell[0]} />))}\r\n  </StyledStage>\r\n)\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? 'red' : '#999')};\r\n  background: black;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`","import React from 'react';\r\n\r\n// Styled Components\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({gameOver, text}) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`","import React from 'react';\r\n\r\n// Styled Components\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({callback}) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n)\r\n\r\nexport default StartButton;","import styled from 'styled-components';\r\nimport bgImg from '../../img/bg.png'\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImg}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`","import { useState, useCallback } from 'react';\r\nimport { TETROMINOS, randomTetromino } from '../services/tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../services/gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  });\r\n\r\n  const rotate = (tetromino, dir) => {\r\n    // Turn the rows into columns (transpose)\r\n    const rotatedTetromino = tetromino.map((_, index) => tetromino.map(col => col[index]));\r\n\r\n    // Reverse each row to get a rotated tetromino\r\n    if (dir > 0) return rotatedTetromino.map(row => row.reverse());\r\n    return rotatedTetromino.reverse();\r\n\r\n  }\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev, \r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided\r\n    }));\r\n  }\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false\r\n    })\r\n  }, [])\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../services/gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((acc, row) => {\r\n        // A row should be cleared when it is filled with tetrominos\r\n        // A row will be filled with tetrominos when the type of each cell is not 0\r\n        // If findIndex does not find any cells with type 0, it will return -1\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          // Increment the total number of rows cleared in this round\r\n          setRowsCleared(prev => prev + 1);\r\n          // Add a new clean row to the top of the stage\r\n          acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          // Return the accumulator without adding the current row\r\n          return acc;\r\n        }\r\n\r\n        // Otherwise, add the current row and return the accumulator\r\n        acc.push(row);\r\n        return acc;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First, flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      );\r\n\r\n      // Then, draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`\r\n            ]\r\n          }\r\n        })\r\n      });\r\n\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    }\r\n\r\n    setStage(prev => updateStage(prev))\r\n\r\n  }, [player, resetPlayer])\r\n\r\n  return [stage, setStage, rowsCleared];\r\n}","import React, { useState } from 'react';\r\nimport { createStage, checkCollision } from '../services/gameHelpers';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared)\r\n\r\n  console.log('re-render');\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  }\r\n\r\n  const drop = () => {\r\n    //Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200)\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER!!!!\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  }\r\n\r\n  const keyUp = ({keyCode}) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        console.log(\"interval on\");\r\n        setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n    console.log(\"interval off\");\r\n    setDropTime(null);\r\n    drop();\r\n  }\r\n\r\n  const move = ({keyCode}) => {\r\n    if (!gameOver) {\r\n      // Left arrow\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n\r\n      // Right arrow\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n\r\n      // Down arrow\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper \r\n      role=\"button\" \r\n      tabIndex=\"0\" \r\n      onKeyDown={e => move(e)} \r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          { gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame}/>\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  )\r\n};\r\n\r\nexport default Tetris;","import { useCallback, useState, useEffect } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // We have a score to calculate\r\n    if (rowsCleared > 0) {\r\n      // This is how the original Tetris score is calculated\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      // Keep track of total rows cleared during the game\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel]\r\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}